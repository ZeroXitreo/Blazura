@implements IDisposable

@code {
    [Parameter] public required RenderFragment ChildContent { get; set; }
    [CascadingParameter] private DrawerManager? drawerManager { get; set; }

    public void Open()
    {
        drawerManager?.Open(ChildContent);
    }

    public void Dispose()
    {
        drawerManager?.Close(ChildContent);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (drawerManager is not null)
        {
            await drawerManager.TriggerRender();
        }
        base.OnAfterRender(firstRender);
    }
}
