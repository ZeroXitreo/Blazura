@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using Microsoft.Extensions.DependencyInjection
@inject IServiceProvider ServiceProvider

<button type="button" class="SimpleInputToggle RippleEffect" @onclick="() => ToggleOption()">
	<Flexer>
		<FlexerFiller>
			<DisplayName For="ValueExpression" Format="Format" />
			</FlexerFiller>
		<div class="shell @(Value ? "active" : null)">
			<div class="bullet"></div>
		</div>
	</Flexer>
</button>

@code {
	[Parameter] public bool Value { get; set; } = default!;
	[Parameter] public EventCallback<bool> ValueChanged { get; set; } = default!;
	[Parameter] public Expression<Func<bool>>? ValueExpression { get; set; }
	[Parameter] public Func<string, string> Format { get; set; } = (str) => str;

	private IInputFormatter? InputFormatter;
	protected override void OnInitialized()
	{
		InputFormatter = ServiceProvider.GetService<IInputFormatter>();
		Format = InputFormatter?.Format ?? Format;
	}

	private async Task ToggleOption()
	{
		Value = !Value;
		await ValueChanged.InvokeAsync(Value);
	}
}
