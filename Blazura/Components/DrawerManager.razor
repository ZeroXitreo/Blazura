@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@foreach (var renderFragment in renderFragments)
{
    <div class="DrawerBackdrop @(renderFragment.Value ? "closed" : null)" @onclick="() => Close(renderFragment.Key)"></div>
    <div class="Drawer @(renderFragment.Value ? "closed" : null)">
        @renderFragment.Key
    </div>
}

@code {
    [CascadingParameter] private Backdrop backdrop { get; set; } = default!;

    // boolean indicates if it's closed
    private Dictionary<RenderFragment, bool> renderFragments = [];

    public void Open(RenderFragment renderFragment)
    {
        if (renderFragments.ContainsKey(renderFragment))
        {
            renderFragments[renderFragment] = false;
        }
        else
        {
            renderFragments.Add(renderFragment, false);
        }
        StateHasChanged();
        RunBodyCheck();
    }

    public void Close(RenderFragment renderFragment)
    {
        foreach (var renderFragmentToDelete in renderFragments.Where(rf => rf.Value))
        {
            renderFragments.Remove(renderFragmentToDelete.Key);
        }
        renderFragments[renderFragment] = true;
        StateHasChanged();
        RunBodyCheck();
    }

    public async Task TriggerRender()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void RunBodyCheck()
    {
        backdrop.SetBackdrop(this.GetType(), renderFragments.Count != 0);
    }
}
